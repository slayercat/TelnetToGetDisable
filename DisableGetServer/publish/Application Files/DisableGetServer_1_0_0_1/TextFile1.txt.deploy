TelnetConnection telnetSwitch = new TelnetConnection(nowUsingItem.IpAddress, 23);

            /////////////////
            LogInToEvent.WriteDebug("试图连接");
            nowUsingItem.LastFlushLog += "\n试图连接\n";
            if (telnetSwitch.Connect())
            {
                LogInToEvent.WriteDebug("连接成功");
                nowUsingItem.LastFlushLog += "\n连接成功\n";
                var whatTypeOfSwitch=DisableGetObjects.ApplicationSettings.GetSwitchTypeByName(settings.SwitchTypeItems,nowUsingItem.SwitchTypeNameBelongTo);
                if (whatTypeOfSwitch != null)
                {
                    LogInToEvent.WriteDebug("类型：" + whatTypeOfSwitch.ToString());
                }
                else
                {
                     nowUsingItem.FlushResult = "错误的类型"+nowUsingItem.SwitchTypeNameBelongTo;
                     goto errorProcress;
                }

                //登录用户名
                if (whatTypeOfSwitch.IsThisSwitchNeedsOfUserName)
                {
                    LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "要求登录用户名");
                    nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "要求登录用户名\n";
                    try
                    {
                        telnetSwitch.WaitFor(whatTypeOfSwitch.PromptForUserName);
                    }
                    catch(Exception e)
                    {
                        nowUsingItem.FlushResult = "没有要求登录用户名\n";
                        LogInToEvent.WriteDebug(nowUsingItem.Name+"/"+ nowUsingItem.IpAddress + "-"+e.ToString());
                        goto errorProcress;
                    }

                    telnetSwitch.Send(nowUsingItem.UserName);
                    System.Threading.Thread.Sleep(1000);
                }

                //登录密码
                LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-"+"要求登录密码");
                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "要求登录密码\n";
                try
                {
                    telnetSwitch.WaitFor(whatTypeOfSwitch.PromptForPassword);
                }
                catch(Exception e)
                {
                    LogInToEvent.WriteDebug(nowUsingItem.Name+"/"+ nowUsingItem.IpAddress + "-"+e.ToString());
                    nowUsingItem.FlushResult = "没有要求密码或密码请求字符串不正确";
                    goto errorProcress;
                }
                LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "发送登录密码");

                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "发送登录密码\n";

                telnetSwitch.Send(nowUsingItem.Password);
                System.Threading.Thread.Sleep(1000);
                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "取得结果\n";
                if (!telnetSwitch.WorkingData.Contains(whatTypeOfSwitch.PromptForCommandBeforeEnable))
                {
                    nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "错误：\n" + telnetSwitch.WorkingData + "\n";
                    for (int counter = 0; counter < 3; ++counter)
                    {
                        telnetSwitch.Send(nowUsingItem.Password);
                        nowUsingItem.LastFlushLog += "\n发送密码，第" + counter.ToString() + "次重试\n";
                        if (telnetSwitch.WorkingData.Contains(whatTypeOfSwitch.PromptForCommandBeforeEnable))
                        {
                            break;
                            nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "重试成功，第" + counter.ToString() + "次\n";
                        }
                    }
                }
                telnetSwitch.Send("\r\n"); telnetSwitch.Send("\r\n"); telnetSwitch.Send("\r\n");
                System.Threading.Thread.Sleep(1000);

                //确认登录密码正确性
                LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "确认登录密码正确性");
                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "确认登录密码正确性\n";
                try
                {
                    telnetSwitch.WaitFor(whatTypeOfSwitch.PromptForCommandBeforeEnable);
                }
                catch(Exception e)
                {
                    LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + e.ToString());
                    nowUsingItem.FlushResult = "登录密码错误";
                    goto errorProcress;
                }

                LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "发送enable");
                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "发送enable\n";
                telnetSwitch.Send("enable");
                System.Threading.Thread.Sleep(1000);

                //enable登录过程
                if (whatTypeOfSwitch.IsThisSwitchNeedsOfEnableUserName)
                {
                    LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "等待要求enable用户名登录");
                    nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "等待要求enable用户名登录\n";
                    try
                    {
                        telnetSwitch.WaitFor(whatTypeOfSwitch.PromptForEnableUserName);
                    }
                    catch (Exception e)
                    {
                        LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + e.ToString());
                        nowUsingItem.FlushResult = "没有提示输入enable用户名";
                        goto errorProcress;
                    }
                    nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "发送enable用户名\n";
                    telnetSwitch.Send(nowUsingItem.EnableUsername);
                    System.Threading.Thread.Sleep(1000);
                }


                //enable密码
                LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "等待要求enable密码");
                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "等待要求enable密码\n";
                try
                {
                    telnetSwitch.WaitFor(whatTypeOfSwitch.PromptForEnablePassword);
                }
                catch (Exception e)
                {
                    LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + e.ToString());
                    nowUsingItem.FlushResult = "没有提示输入enable密码/enable用户名错误？";
                    goto errorProcress;
                }
                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "发送enable密码\n";
                telnetSwitch.Send(nowUsingItem.EnablePassword);
                telnetSwitch.Send("\r\n"); telnetSwitch.Send("\r\n"); telnetSwitch.Send("\r\n");
                System.Threading.Thread.Sleep(1000);

                //enable 成功？
                LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "确认enable成功");

                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "确认enable成功\n";
                try
                {
                    telnetSwitch.WaitFor(whatTypeOfSwitch.PromptForCommandAfterEnable);
                }
                catch (Exception e)
                {
                    LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + e.ToString());
                    nowUsingItem.FlushResult = "没有提示enable提示符，enable 密码错误？";
                    goto errorProcress;
                }

                //发送查询状态信息
                LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "发送状态查询指令" + whatTypeOfSwitch.CommandForFindStatus);
                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "发送状态查询指令\n";
                telnetSwitch.Send(whatTypeOfSwitch.CommandForFindStatus);
                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "发送状态查询指令完成\n";
                System.Threading.Thread.Sleep(5000);//等待5s
                try
                {
                    //筛选项目
                    //若没有commandline，则不断发送空格，直到有为止
                    /*string dataContains = telnetSwitch.WorkingData;
                    LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "取到ORA1项目：\n" + dataContains);
                    while (!dataContains.ToLower().Contains(whatTypeOfSwitch.PromptForCommandAfterEnable.ToLower()))
                    {
                        telnetSwitch.Send(" ");
                        System.Threading.Thread.Sleep(5000);//等待5s
                        dataContains += telnetSwitch.WorkingData;
                        LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "取到ORA2项目：\n" + dataContains);
                    }*/

                    
                  

                    telnetSwitch.Send(" ");
                    LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "等待命令行，发送空格1\n");
                    System.Threading.Thread.Sleep(2000);//等待2s
                    var dataCosplit = telnetSwitch.SessionLog.Split(new string[]{"\n"},StringSplitOptions.RemoveEmptyEntries);
                    while (!dataCosplit[dataCosplit.Length - 1].Trim().ToLower().Contains(whatTypeOfSwitch.PromptForCommandAfterEnable.ToLower()))
                    {
                        //一直到命令行出来为止
                        LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "等待命令行，发送空格：" + dataCosplit[dataCosplit.Length - 1].Trim() + "\n");
                        telnetSwitch.Send(" ");
                        System.Threading.Thread.Sleep(2000);//等待2s
                    }
                    string dataContains = telnetSwitch.SessionLog;
             
                    LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "取到项目：\n"+dataContains);
                    var lines = dataContains.Split('\n');
                    LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "开始检查项目列表：共" + lines.Length+"项");
                    nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "开始检查项目列表：共" + lines.Length.ToString()+ "项\n";
                    bool isthisswitchhasdisable = false;
                    //保存disable；
                    string flushResult = "";
                    foreach (var t in lines)
                    {
                        //LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "检查项目_disable\n" + t + "查找" + whatTypeOfSwitch.ScreeningStringForDisableItem);
                        if (t.ToLower().Contains(whatTypeOfSwitch.ScreeningStringForDisableItem.ToLower()))
                        {
                            //LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "检查项目_port\n" + t + "查找" + whatTypeOfSwitch.ScreeningStringForPortLine);
                            if (t.ToLower().Contains(whatTypeOfSwitch.ScreeningStringForPortLine.ToLower()))
                            {
                                //找到了disable的项
                                LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "DISABLE:" + t);
                                flushResult+= t + "\n";
                                isthisswitchhasdisable = true;
                            }
                        }

                    }
                    nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "检查结束";
                    if (isthisswitchhasdisable)
                    {
                        //有disable
                        //增加disable
                        nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "发现disable\n";
                        nowUsingItem.FlushResult = flushResult;
                        lock (lockdisablehashset)
                        {
                            if (!hashset_switchs_disables.Contains(nowUsingItem))
                            {
                                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "增加到disable列表\n";
                                hashset_switchs_disables.Add(nowUsingItem);
                            }
                        }
                    }
                    else
                    {
                        //检查有无disable，有则消除
                        nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "未发现disable\n";
                        lock (lockdisablehashset)
                        {
                            if (hashset_switchs_disables.Contains(nowUsingItem))
                            {
                                nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "从disable列表去除\n";
                                hashset_switchs_disables.Remove(nowUsingItem);
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + e.ToString());
                    nowUsingItem.FlushResult = "无Fa提示符";
                    goto errorProcress;
                }

            }
            else
            {
                nowUsingItem.FlushResult = "无法连接到该交换机";
                goto errorProcress;
            }

            nowUsingItem.LastFlushTime = DateTime.Now;

            LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "成功，日志：\n" + telnetSwitch.SessionLog);
            nowUsingItem.LastFlushLog += "\n" + nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "成功\n";
            //成功
            lock (lockerrorhashset)
            {
                if (hashset_switchs_error.Contains(nowUsingItem))
                {
                    hashset_switchs_error.Remove(nowUsingItem);
                }
            }
            if (nowProgressing == nowUsingItem.FlushResult)
            {
                nowUsingItem.FlushResult = "";

            }
            nowUsingItem.LastFlushLog +="\n\n SESSIONLOG:\n\n"+ telnetSwitch.SessionLog;
            return;


        errorProcress:
            //失败
            LogInToEvent.WriteInfo(nowUsingItem.Name+"/"+ nowUsingItem.IpAddress + "-" + nowUsingItem.FlushResult+telnetSwitch.WorkingData);
            LogInToEvent.WriteDebug(nowUsingItem.Name + "/" + nowUsingItem.IpAddress + "-" + "失败，日志：\n" + telnetSwitch.SessionLog);

            lock (lockdisablehashset)
            {
                if (hashset_switchs_disables.Contains(nowUsingItem))
                {
                    //错误的时候消除disable
                    hashset_switchs_disables.Remove(nowUsingItem);
                }
            }
            lock (lockerrorhashset)
            {
                if(!hashset_switchs_error.Contains(nowUsingItem))
                {
                    hashset_switchs_error.Add(nowUsingItem);
                }
            }
            nowUsingItem.LastFlushLog = telnetSwitch.SessionLog;
            nowUsingItem.LastFlushTime = DateTime.Now;